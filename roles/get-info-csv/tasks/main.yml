---

- name: Include server firewall to check
  include_vars: server.yml

- name: Get hostname
  win_shell: echo {{ ansible_hostname }}  > {{ ansible_hostname }}_data.txt
  args:
    executable: cmd

- name: Put blank
  win_shell: echo( >> {{ ansible_hostname }}_data.txt
  args:
    executable: cmd

- name: Put blank
  win_shell: echo( >> {{ ansible_hostname }}_data.csv
  args:
    executable: cmd

- name: Put blank
  win_shell: ipconfig | find "IPv4 Address" > {{ ansible_hostname }}_dos.txt
  args:
    executable: cmd

- name: Fetching file
  win_copy:
    src:  {{ ansible_hostname }}_dos.txt
    dest: {{ ansible_hostname }}_linux.txt
    
 awk -F':' '{print $2}' >>  {{ ansible_hostname }}_linux.txt

- name: Get IP
  win_shell: hostname -I | cut -d' ' -f1 >> /tmp/{{ ansible_hostname }}_data.csv
  args:
    executable: cmd

- name: Get cpu core
  win_shell: nproc >> /tmp/{{ ansible_hostname }}_data.csv
  args:
    executable: cmd

- name: Get memory ***memory-calculation***
  win_shell: awk '/MemTotal/ {print $2}' /proc/meminfo > memory
  args:
    executable: cmd

- name: Get memory in GB ***memory-calculation***
  win_shell: awk '{ print $1/1000000}' memory >> /tmp/{{ ansible_hostname }}_data.csv
  args:
    executable: cmd

- name: Get Disk Info ***disk-calculation***  
  #calculation will be wrong if there's a disk with MB
  win_shell: fdisk -l|grep /dev/ > disk && awk 'NR==1{print $2}' disk 
  args:
    executable: cmd
  register: out  
    
- name: Get Disk Info ***disk-calculation***  
  win_shell: fdisk -l|grep /dev/sd > disk && awk '/Disk \/dev\/sd/ {print $3}' disk  > disk2
  args:
    executable: cmd
  when: out.stdout ==  "/dev/sda:"

- name: Get Disk Info ***disk-calculation***  
  win_shell: fdisk -l|grep /dev/vd > disk && awk '/Disk \/dev\/vd/ {print $3}' disk  > disk2
  args:
    executable: cmd
  when: out.stdout ==  "/dev/vda:"

- name: Get how many disk ***disk-calculation***
  win_shell: cat disk2 | wc -l
  args:
    executable: cmd
  register: countline

- name: Calculate the sum of disks ***disk-calculation***
  win_shell: awk '{sum+=$1} (NR%{{countline.stdout}})==0{print sum}' disk2 >> /tmp/{{ ansible_hostname }}_data.csv
  args:
    executable: cmd     
  
- name: delete csv
  win_shell: rm -f /tmp/{{ ansible_hostname }}_output.csv
  args:
    executable: cmd
    warn: false
  ignore_errors: True

- name: Put the headers
  win_shell: echo 'Hostname,Check-Host,Port,IPAddress,CPUCore,RAM,Disk' > /tmp/{{ ansible_hostname }}_output.csv
  
- name: Put it in CSV in one line
  win_shell: cat /tmp/{{ ansible_hostname }}_data.csv | awk '{print}' ORS=','  >> /tmp/{{ ansible_hostname }}_output.csv
  args:
    executable: cmd
  
- name: Check if remote host port
  wait_for: host={{ item.server2 }} port={{ item.port }} timeout=1
  ignore_errors: True
  register: out
  when: item.server1 == ansible_hostname
  with_items: "{{ servers }}"
  
- debug: var=out  
  
- name: Save remote port   
  win_shell: printf "\n,{{ item.item.server2 }} port {{ item.item.port }} is {% if item.failed %}closed{% else %}open{% endif %}"  >> /tmp/{{ ansible_hostname }}_output.csv
  args:
    executable: cmd
  when: item.item.server1 == ansible_hostname
  with_items: "{{ out.results }}"
  
- name: delete local /tmp/fetched
  win_shell: rm -fr /tmp/fetched/ 
  args:
    executable: cmd
    warn: False
  ignore_errors: True
  delegate_to: localhost
    
- name: Fetching file
  fetch:
    src: /tmp/{{ ansible_hostname }}_output.csv
    dest: /tmp/fetched

#- name: Combined to one file
#  win_shell: cat /tmp/fetched/{{ ansible_hostname }}/tmp/{{ ansible_hostname }}_output.csv >> /tmp/fetched/main_output.csv && printf '\r\n' >> /tmp/fetched/main_output.csv
#  args:
#    executable: cmd
#  delegate_to: localhost   


 
    
